# Generated by Django 3.0.8 on 2020-09-07 20:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountType',
            fields=[
                ('AccountTypeID', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('AddressID', models.AutoField(primary_key=True, serialize=False)),
                ('streetNumber', models.CharField(max_length=5)),
                ('street', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('province', models.CharField(max_length=50)),
                ('postalCode', models.CharField(max_length=10)),
                ('createdOn', models.DateTimeField(auto_now_add=True, null=True)),
                ('lastModified', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AdminInvitationCode',
            fields=[
                ('AdminInvitationCodeID', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('emailAddress', models.EmailField(max_length=254)),
                ('used', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('MatchID', models.AutoField(primary_key=True, serialize=False)),
                ('numberOfRounds', models.IntegerField()),
                ('matchNumber', models.IntegerField()),
                ('wentToFinalRound', models.BooleanField()),
                ('matchResultCode', models.CharField(choices=[('KO', 'Knock Out'), ('TKO', 'Technical Knock Out'), ('UD', 'Unanimous Decision'), ('SD', 'Split Decision'), ('MD', 'Majority Decision'), ('DR', 'Draw')], max_length=30)),
                ('blueBoxerUserID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Blue_Corner_Boxer', to=settings.AUTH_USER_MODEL, verbose_name='Blue Corner Boxer')),
                ('cornerJudge1Ruling', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Corner_Judge_1_Winner_Pick_User_ID', to=settings.AUTH_USER_MODEL, verbose_name='Corner Judge 1 Winner Pick User ID')),
                ('cornerJudge1UserID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Corner_Judge_1_User_ID', to=settings.AUTH_USER_MODEL, verbose_name='Corner Judge 1 User ID')),
                ('cornerJudge2Ruling', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Corner_Judge_2_Winner_Pick_User_ID', to=settings.AUTH_USER_MODEL, verbose_name='Corner Judge 2 Winner Pick User ID')),
                ('cornerJudge2UserID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Corner_Judge_2_User_ID', to=settings.AUTH_USER_MODEL, verbose_name='Corner Judge 2 User ID')),
                ('cornerJudge3Ruling', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Corner_Judge_3_Winner_Pick_User_ID', to=settings.AUTH_USER_MODEL, verbose_name='Corner Judge 3 Winner Pick User ID')),
                ('cornerJudge3UserID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Corner_Judge_3_User_ID', to=settings.AUTH_USER_MODEL, verbose_name='Corner Judge 3 User ID')),
                ('cornerJudge4Ruling', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Corner_Judge_4_Winner_Pick_User_ID', to=settings.AUTH_USER_MODEL, verbose_name='Corner Judge 4 Winner Pick User ID')),
                ('cornerJudge4UserID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Corner_Judge_4_User_ID', to=settings.AUTH_USER_MODEL, verbose_name='Corner Judge 4 User ID')),
                ('redBoxerUserID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Red_Corner_Boxer', to=settings.AUTH_USER_MODEL, verbose_name='Red Corner Boxer')),
                ('refereeUserID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Referee_User_ID', to=settings.AUTH_USER_MODEL, verbose_name='Referee User ID')),
                ('winnerUserID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Winning_Boxer_UserID', to=settings.AUTH_USER_MODEL, verbose_name='Winning Boxer UserID')),
            ],
        ),
        migrations.CreateModel(
            name='MatchResultCode',
            fields=[
                ('MatchResultCode', models.CharField(max_length=4, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('OrganizationID', models.AutoField(primary_key=True, serialize=False)),
                ('organizationName', models.CharField(max_length=100, unique=True)),
                ('organizationShortName', models.CharField(max_length=100, null=True)),
                ('phoneNumber', models.IntegerField(null=True)),
                ('website', models.CharField(max_length=200, null=True)),
                ('email', models.EmailField(max_length=254, null=True)),
                ('additionalInsurees', models.CharField(max_length=1000, null=True)),
                ('clubMailRecipients', models.CharField(max_length=100, null=True)),
                ('clubEmailRecipients', models.CharField(max_length=100, null=True)),
                ('createdOn', models.DateTimeField(auto_now_add=True, null=True)),
                ('lastModified', models.DateTimeField(auto_now=True, null=True)),
                ('isOrganization', models.BooleanField(default=False)),
                ('clubCoachUserID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='Club_Coach_User', to=settings.AUTH_USER_MODEL, verbose_name='Club Coach User')),
                ('clubOwnerUserID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='Club_Owner_User', to=settings.AUTH_USER_MODEL, verbose_name='Club Owner User')),
                ('clubPresidentUserID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='President_User', to=settings.AUTH_USER_MODEL, verbose_name='President User')),
                ('mailingAddressID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Mailing_Address_of_Organization', to='FightScheduler.Address', verbose_name='Mailing Address of Organization')),
                ('physicalAddressID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Physical_Address_of_Organization', to='FightScheduler.Address', verbose_name='Physical Address of Organization')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=200)),
                ('pub_date', models.DateField(verbose_name='date published')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('RoleID', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30)),
                ('description', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('SeriesID', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('organizationID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Organization_ID', to='FightScheduler.Organization', verbose_name='Organization ID')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('ServiceID', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=30)),
                ('shortName', models.CharField(max_length=30)),
                ('fullName', models.CharField(max_length=100)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=6)),
                ('createdOn', models.DateTimeField(auto_now_add=True, null=True)),
                ('lastModified', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Signature',
            fields=[
                ('SignatureID', models.AutoField(primary_key=True, serialize=False)),
                ('image', models.FileField(max_length=5000000, upload_to='')),
                ('electronicSignature', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='StatusCode',
            fields=[
                ('StatusCode', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('statusCodeName', models.CharField(max_length=30)),
                ('description', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Waiver',
            fields=[
                ('WaiverID', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='WaiverRequirement',
            fields=[
                ('WaiverRequirementID', models.AutoField(primary_key=True, serialize=False)),
                ('annualRenewalRequired', models.BooleanField()),
                ('roleID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Role_Requiring_a_Waiver', to='FightScheduler.Role', verbose_name='Role Requiring a Waiver')),
            ],
        ),
        migrations.CreateModel(
            name='SignedWaiver',
            fields=[
                ('SignedWaiverID', models.AutoField(primary_key=True, serialize=False)),
                ('waiverID', models.IntegerField()),
                ('signatoryRole', models.CharField(max_length=100)),
                ('signatureDate', models.DateTimeField(auto_now_add=True, null=True)),
                ('signatureLocation', models.CharField(max_length=100)),
                ('signatoryUserID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Signatory_on_Behalf_Of', to=settings.AUTH_USER_MODEL, verbose_name='Signatory on Behalf Of')),
                ('signatureID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Signature_ID', to='FightScheduler.Signature', verbose_name='Signature ID')),
                ('waiverFormUserID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Waiver_Form_User', to=settings.AUTH_USER_MODEL, verbose_name='Waiver Form User')),
            ],
        ),
        migrations.CreateModel(
            name='Show',
            fields=[
                ('ShowID', models.AutoField(primary_key=True, serialize=False)),
                ('addressID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Show_Venue', to='FightScheduler.Address', verbose_name='Show Venue')),
                ('organizingOrganizationID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Organizing_Organization_ID', to='FightScheduler.Organization', verbose_name='Organizing Organization ID')),
                ('seriesID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Series_ID', to='FightScheduler.Series', verbose_name='Series ID')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceEnrollment',
            fields=[
                ('ServiceEnrollmentID', models.AutoField(primary_key=True, serialize=False)),
                ('startDate', models.DateField(auto_now_add=True, null=True)),
                ('endDate', models.DateField(auto_now_add=True, null=True)),
                ('UserID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Enrolled_User_ID', to=settings.AUTH_USER_MODEL, verbose_name='Enrolled User ID')),
                ('serviceID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Service_ID', to='FightScheduler.Service', verbose_name='Service ID')),
            ],
        ),
        migrations.CreateModel(
            name='PersonalInformation',
            fields=[
                ('PersonInfoID', models.AutoField(primary_key=True, serialize=False)),
                ('businessPhone', models.IntegerField(null=True)),
                ('phoneExtension', models.CharField(max_length=10, null=True)),
                ('homePhone', models.IntegerField(null=True)),
                ('cellPhone', models.IntegerField(null=True)),
                ('fax', models.IntegerField(null=True)),
                ('citizenship', models.CharField(max_length=30)),
                ('createdOn', models.DateTimeField(auto_now_add=True, null=True)),
                ('lastModified', models.DateTimeField(auto_now=True, null=True)),
                ('UserID', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='User_ID_for_Personal_Information', to=settings.AUTH_USER_MODEL, verbose_name='User ID for Personal Information')),
                ('addressID', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Address_of_User', to='FightScheduler.Address', verbose_name='Address of User')),
                ('organizationID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Club_of_User', to='FightScheduler.Organization', verbose_name='Club of the User')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('PersonID', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=100)),
                ('password', models.CharField(max_length=100)),
                ('emailAddress', models.EmailField(max_length=254)),
                ('lastLoginDateTime', models.DateTimeField(auto_now=True, null=True)),
                ('createdOn', models.DateTimeField(auto_now_add=True, null=True)),
                ('lastModified', models.DateTimeField(auto_now=True, null=True)),
                ('accountTypeID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Person_Account_Type', to='FightScheduler.AccountType', verbose_name='Person Account Type')),
                ('statusCode', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Person_System_Status', to='FightScheduler.StatusCode', verbose_name='Person System Status')),
            ],
        ),
        migrations.CreateModel(
            name='NonBoxerInfo',
            fields=[
                ('NonBoxerInfoID', models.AutoField(primary_key=True, serialize=False)),
                ('nccpNum', models.IntegerField(null=True)),
                ('coachLevel', models.CharField(choices=[('1', '1 - Certified Apprentice Coach'), ('2', '2 - Certified Club Coach'), ('3', '3 - Competition Coach'), ('4', '4 - Advanced Coaching Diploma I'), ('5', '5 - Advanced Coaching Diploma II')], default='1', max_length=30)),
                ('officialLevel', models.CharField(choices=[('1', '1 - Regional I'), ('2', '2 - Regional II'), ('3', '3 - Provincial'), ('4', '4 - National')], default='1', max_length=30)),
                ('judgeOnlyPreference', models.BooleanField()),
                ('clubOwnershipProofDocument', models.FileField(max_length=5000000, null=True, upload_to='')),
                ('boxingOntarioAdminInvitationCode', models.CharField(max_length=20, null=True)),
                ('boxingOntarioEmployeeNum', models.CharField(max_length=30, null=True)),
                ('policeRecordsCheckPerformed', models.BooleanField()),
                ('policeRecordsCheckExpiry', models.DateField(null=True)),
                ('UserID', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='User_ID_for_Additional_Non_Boxer_Info', to=settings.AUTH_USER_MODEL, verbose_name='User ID for Additional Non Boxer Info')),
                ('clubOwnership', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Club_of_Owner', to='FightScheduler.Organization', verbose_name='Club of the Owner')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalCert',
            fields=[
                ('MedicalCertID', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(auto_now_add=True, null=True)),
                ('image', models.FileField(max_length=5000000, upload_to='')),
                ('UserID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Medical_Cert_User_ID', to=settings.AUTH_USER_MODEL, verbose_name='Medical Cert User ID')),
            ],
        ),
        migrations.CreateModel(
            name='MatchRound',
            fields=[
                ('MatchRoundID', models.AutoField(primary_key=True, serialize=False)),
                ('roundNumber', models.IntegerField()),
                ('redBoxerScore', models.IntegerField()),
                ('blueBoxerScore', models.IntegerField()),
                ('matchID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Match_ID', to='FightScheduler.Match', verbose_name='Match ID')),
            ],
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_text', models.CharField(max_length=200)),
                ('votes', models.IntegerField(default=0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='FightScheduler.Question')),
            ],
        ),
        migrations.CreateModel(
            name='Career',
            fields=[
                ('CareerID', models.AutoField(primary_key=True, serialize=False)),
                ('genderCode', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], default='Male', max_length=10)),
                ('dateofBirth', models.DateField(null=True)),
                ('height', models.DecimalField(decimal_places=2, max_digits=5)),
                ('currentWeight', models.DecimalField(decimal_places=2, max_digits=6)),
                ('amateurBouts', models.IntegerField(null=True)),
                ('amateurWins', models.IntegerField(null=True)),
                ('previousProfessionalCombatSportInvolvement', models.BooleanField(default=False, null=True)),
                ('professionalYears', models.IntegerField(null=True)),
                ('professionalBouts', models.IntegerField(null=True)),
                ('professionalWins', models.IntegerField(null=True)),
                ('previousCombatSportInvolvementInOtherCountry', models.BooleanField(null=True)),
                ('previousYearsOutofCountry', models.IntegerField(null=True)),
                ('previousBoutsOutofCountry', models.IntegerField(null=True)),
                ('previousWinsOutofCountry', models.IntegerField(null=True)),
                ('previousAmateurCombatSportInvolvement', models.BooleanField(null=True)),
                ('previousAmateurBouts', models.IntegerField(null=True)),
                ('previousAmateurWins', models.IntegerField(null=True)),
                ('previousAmateurKOs', models.IntegerField(null=True)),
                ('previousAmateurTKOs', models.IntegerField(null=True)),
                ('createdOn', models.DateTimeField(auto_now_add=True, null=True)),
                ('lastModified', models.DateTimeField(auto_now=True, null=True)),
                ('UserID', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='User_ID_for_Career_Info', to=settings.AUTH_USER_MODEL, verbose_name='User ID for Career Info')),
            ],
        ),
        migrations.CreateModel(
            name='AvailabilitySchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('callToConfirmAvailability', models.BooleanField()),
                ('sundayAMAvailability', models.BooleanField()),
                ('mondayAMAvailability', models.BooleanField()),
                ('tuesdayAMAvailability', models.BooleanField()),
                ('wednesdayAMAvailability', models.BooleanField()),
                ('thursdayAMAvailability', models.BooleanField()),
                ('fridayAMAvailability', models.BooleanField()),
                ('saturdayAMAvailability', models.BooleanField()),
                ('sundayPMAvailability', models.BooleanField()),
                ('mondayPMAvailability', models.BooleanField()),
                ('tuesdayPMAvailability', models.BooleanField()),
                ('wednesdayPMAvailability', models.BooleanField()),
                ('thursdayPMAvailability', models.BooleanField()),
                ('fridayPMAvailability', models.BooleanField()),
                ('saturdayPMAvailability', models.BooleanField()),
                ('availableJanuary', models.BooleanField()),
                ('availableFebruary', models.BooleanField()),
                ('availableMarch', models.BooleanField()),
                ('availableApril', models.BooleanField()),
                ('availableMay', models.BooleanField()),
                ('availableJune', models.BooleanField()),
                ('availableJuly', models.BooleanField()),
                ('availableAugust', models.BooleanField()),
                ('availableSeptember', models.BooleanField()),
                ('availableOctober', models.BooleanField()),
                ('availableNovember', models.BooleanField()),
                ('availableDecember', models.BooleanField()),
                ('createdOn', models.DateTimeField(auto_now_add=True, null=True)),
                ('lastModified', models.DateTimeField(auto_now=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='User_for_Availability_Schedule', to=settings.AUTH_USER_MODEL, verbose_name='User for Availability Schedule')),
            ],
        ),
        migrations.CreateModel(
            name='AllowableService',
            fields=[
                ('AlowableServiceID', models.AutoField(primary_key=True, serialize=False)),
                ('RoleID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Role_Associated_to_Allowed_Service', to='FightScheduler.Role', verbose_name='Role Associated to Allowed Service')),
                ('ServiceID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Service_Associated_to_Allowed_Service', to='FightScheduler.Service', verbose_name='Service Associated to Allowed Service')),
            ],
        ),
        migrations.CreateModel(
            name='Affiliation',
            fields=[
                ('AffiliationID', models.AutoField(primary_key=True, serialize=False)),
                ('RoleID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='Role_ID', to='FightScheduler.Role', verbose_name='Role ID')),
                ('UserID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='User_Affiliation_to_Organization', to=settings.AUTH_USER_MODEL, verbose_name='User Affiliation to Organization')),
                ('affiliatedOrganizationID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='Affiliated_Organiation', to='FightScheduler.Organization', verbose_name='Affiliated Organiation')),
                ('affiliatedUserID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='User_Affiliated_to_Other_User_in_Organization', to=settings.AUTH_USER_MODEL, verbose_name='User Affiliated to Other User in Organization')),
            ],
        ),
        migrations.CreateModel(
            name='AccountInfo',
            fields=[
                ('AccountInfoID', models.AutoField(primary_key=True, serialize=False)),
                ('personalInfoID', models.IntegerField(null=True)),
                ('careerID', models.IntegerField(null=True)),
                ('otherInfoID', models.IntegerField(null=True)),
                ('isBoxer', models.BooleanField(default=False)),
                ('isCoach', models.BooleanField(default=False)),
                ('isOwner', models.BooleanField(default=False)),
                ('isOfficial', models.BooleanField(default=False)),
                ('isJudgeOnly', models.BooleanField(default=False)),
                ('isBoxingOntarioAdmin', models.BooleanField(default=False)),
                ('registrationComplete', models.BooleanField(default=False)),
                ('username', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='User_ID_for_Account_Info', to=settings.AUTH_USER_MODEL, verbose_name='User ID for Account Info')),
            ],
        ),
    ]
